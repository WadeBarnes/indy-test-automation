name: indy-test-automation
on: 
  push:
    branches: [sovrin]
  # workflow_dispatch:
  #   inputs:
  #     nodeVersion: 
  #       description: 'Version of Indy Node'
  #       required: true
  #     plenumVersion:
  #       description: 'Version of Indy Plenum'
  #       required: true
  #     ursaVersion:
  #       description: 'Version of Ursa'
  #       required: true
  #     pyzmqVersion:
  #       description: 'Version of PYZMQ'
  #       required: true
  #       default: "18.1.0"
  #     libIndyVersion: 
  #       description: 'Version of Libindy'
  #       required: true
  #     ubuntuVersion:
  #       description: 'Version of Ubuntu base image'
  #       required: true
  #       default: 'ubuntu-1604'
  #     nodeRepoComponent:
  #       description: 'Hyperledger Artifactory repository component of Indy-Node'
  #       required: true
  #       default: 'main'
  #     nodeSovrinRepoComponent: 
  #       description: 'Sovrin repository component of dependcies of Indy-Node artifacts'
  #       required: true
  #       default: 'master' 
  #     clientSovrinRepoComponent: 
  #       description: 'Sovrin repository component of Indy SDK artifacts'
  #       required: true
  #       default: 'master' 
  #     sovtokenfeesVersion: 
  #       description: 'Sovtokenfees version'
  #       required: true
  #       default: '1.2.0-dev166318168' 

env:
  INPUT_NODEVERSION: 1.13.2~rc3
  INPUT_PLENUMVERSION: 1.13.1~rc2
  INPUT_URSAVERSION: 0.3.2-1
  INPUT_PYZMQVERSION: 22.3.0
  INPUT_LIBINDYVERSION: 1.15.0~1625-bionic
  INPUT_UBUNTUVERSION: "ubuntu-2004"
  INPUT_NODEREPOCOMPONENT: rc
  INPUT_NODESOVRINREPOCOMPONENT:  master
  INPUT_CLIENTSOVRINREPOCOMPONENT:  master
  TEST_AUTOMATION_BRANCH: "sovrin"
  INPUT_LIBSOVTOKEN_INSTALL: "yes" 
  INPUT_LIBSOVTOKEN_VERSION: "1.0.5"
  INPUT_LIBSOVTOKEN_REPO_COMPONENT: "dev"
  INPUT_TOKEN_PLUGINS_INSTALL: "yes" 
  INPUT_SOVRIN_INSTALL: "yes"
  INPUT_SOVRIN_VERSION: "1.1.97"
  INPUT_SOVTOKEN_REPO_COMPONENT: "dev"
  INPUT_SOVTOKENFEES_VERSION: 1.2.0-dev1666268500
  INPUT_SOVTOKEN_VERSION: 1.2.0-dev1666268500
jobs:
  workflow-setup:
    name: Initialize Workflow
    runs-on: ubuntu-latest
    outputs:
      GITHUB_REPOSITORY_NAME: ${{ steps.repository-name.outputs.lowercase }}
      DIND_BUILD_ARG: ${{ steps.cache.outputs.DIND_BUILD_ARG}}
    steps:
      - name: Convert the GitHub repository name to lowercase
        id: repository-name
        uses: ASzc/change-string-case-action@v5
        with:
          string: ${{ github.repository }}

      - name: Set outputs
        id: cache
        run: |
          # Set variables according to version of ubuntu
          if [[ "${{ env.INPUT_UBUNTUVERSION }}" == "ubuntu-1604" ]]; then
            echo "DIND_BUILD_ARG=16.04" >> $GITHUB_OUTPUT
            echo "distribution=xenial" >> $GITHUB_OUTPUT
          fi
          if [[ "${{ env.INPUT_UBUNTUVERSION }}" == "ubuntu-2004" ]]; then
            echo "DIND_BUILD_ARG=20.04" >> $GITHUB_OUTPUT
            echo "distribution=focal" >> $GITHUB_OUTPUT
          fi
          
  dind-image:
    name: Create DinD Image
    needs: workflow-setup
    runs-on: ubuntu-latest
    env: 
      GITHUB_REPOSITORY_NAME: ${{ needs.workflow-setup.outputs.GITHUB_REPOSITORY_NAME }}
      DIND_BUILD_ARG: ${{ needs.workflow-setup.outputs.DIND_BUILD_ARG }}
    steps:
      - name: Git checkout teracyhq/docker-files
        uses: actions/checkout@v3
        with:
          repository: teracyhq/docker-files
            
      - name: Prepare image labels and tags
        id: prep
        shell: bash
        run: |
          DOCKER_IMAGE=ghcr.io/${{ env.GITHUB_REPOSITORY_NAME }}/dind
          TAGS="${DOCKER_IMAGE}:latest,${DOCKER_IMAGE}:${{ env.INPUT_UBUNTUVERSION }}"
          echo "tags=${TAGS}" >> $GITHUB_OUTPUT
          echo "created=$(date -u +'%Y-%m-%dT%H:%M:%SZ')" >> $GITHUB_OUTPUT

      - name: Log into the GitHub Container Registry
        if: steps.cache-image.outputs.cache-hit != 'true'
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx

      - name: Build and push image
        uses: docker/build-push-action@v3
        with:
          context: ./ubuntu/base
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.prep.outputs.tags }}
          build-args: |
            UBUNTU_VERSION=${{ env.DIND_BUILD_ARG }}
          labels: |
            org.opencontainers.image.source=${{ github.event.repository.html_url }}
            org.opencontainers.image.created=${{ steps.prep.outputs.created }}
            org.opencontainers.image.revision=${{ github.sha }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max
      
      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

  node-image:
    name: Create Node Image
    needs: workflow-setup
    runs-on: ubuntu-latest
    env: 
      GITHUB_REPOSITORY_NAME: ${{ needs.workflow-setup.outputs.GITHUB_REPOSITORY_NAME }}
    steps:
      - name: Git checkout hyperledger/indy-test-automation
        uses: actions/checkout@v3
        with:
          ref: ${{ env.TEST_AUTOMATION_BRANCH }}

      - name: Prepare image labels and tags
        if: steps.cache-image.outputs.cache-hit != 'true'
        id: prep
        shell: bash
        run: |
          DOCKER_IMAGE=ghcr.io/${{ env.GITHUB_REPOSITORY_NAME }}/node-${{ env.INPUT_UBUNTUVERSION }}
          # TAGS="${DOCKER_IMAGE}:latest,${DOCKER_IMAGE}:${{ env.INPUT_UBUNTUVERSION }}"
          TAGS="${DOCKER_IMAGE}:latest"
          echo "tags=${TAGS}" >>  $GITHUB_OUTPUT
          echo "created=$(date -u +'%Y-%m-%dT%H:%M:%SZ')" >>  $GITHUB_OUTPUT

      - name: Set up Docker Buildx
        if: steps.cache-image.outputs.cache-hit != 'true'
        uses: docker/setup-buildx-action@v2

      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx

      - name: Build and cache image
        if: steps.cache-image.outputs.cache-hit != 'true'
        uses: docker/build-push-action@v3
        with:
          context: ./system/docker/node
          file: ./system/docker/node/Dockerfile.${{ env.INPUT_UBUNTUVERSION }}
          push: false
          tags: ${{ steps.prep.outputs.tags }}
          labels: |
            org.opencontainers.image.source=${{ github.event.repository.html_url }}
            org.opencontainers.image.created=${{ steps.prep.outputs.created }}
            org.opencontainers.image.revision=${{ github.sha }}
          build-args: |
            NODE_REPO_COMPONENT=${{ env.INPUT_NODEREPOCOMPONENT }}
            INDY_NODE_VERSION=${{ env.INPUT_NODEVERSION }}
            INDY_PLENUM_VERSION=${{ env.INPUT_PLENUMVERSION }}
            TOKEN_PLUGINS_INSTALL=${{ env.INPUT_TOKEN_PLUGINS_INSTALL }}
            SOVRIN_VERSION=${{ env.INPUT_SOVRIN_VERSION }}
            SOVRIN_INSTALL=${{ env.INPUT_SOVRIN_INSTALL }}
            SOVTOKEN_VERSION=${{ env.INPUT_SOVTOKEN_VERSION }}
            SOVTOKENFEES_VERSION=${{ env.INPUT_SOVTOKENFEES_VERSION }}
            SOVTOKEN_REPO_COMPONENT=${{ env.INPUT_SOVTOKEN_REPO_COMPONENT }}
            URSA_VERSION=${{ env.INPUT_URSAVERSION }}
            PYTHON3_PYZMQ_VERSION=${{ env.INPUT_PYZMQVERSION }}
            NODE_SOVRIN_REPO_COMPONENT=${{ env.INPUT_NODESOVRINREPOCOMPONENT}}
          outputs: type=docker,dest=/tmp/node_image_${{ env.INPUT_UBUNTUVERSION }}.tar
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max

      - name: Upload node docker image artifacts
        uses: actions/upload-artifact@v2
        with:
          name: node_image
          path: /tmp/node_image_${{ env.INPUT_UBUNTUVERSION }}.tar
          retention-days: 1
      
      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

  client-image:
    name: Create Client Image
    needs: [ workflow-setup, dind-image ]
    runs-on: ubuntu-latest
    env: 
      CACHE_KEY_CLIENT: ${{ needs.workflow-setup.outputs.CACHE_KEY_CLIENT }}
      GITHUB_REPOSITORY_NAME: ${{ needs.workflow-setup.outputs.GITHUB_REPOSITORY_NAME }}
      DIND_BUILD_ARG: ${{ needs.workflow-setup.outputs.DIND_BUILD_ARG }}
    steps:
      - name: Git checkout hyperledger/indy-test-automation
        uses: actions/checkout@v3
        with:
          ref: ${{ env.TEST_AUTOMATION_BRANCH }}

      - name: Prepare image labels and tags
        id: prep
        shell: bash
        run: |
          DOCKER_IMAGE=ghcr.io/${{ env.GITHUB_REPOSITORY_NAME }}/client
          TAGS="${DOCKER_IMAGE}:latest,${DOCKER_IMAGE}:${{ env.INPUT_UBUNTUVERSION }}"
          echo "tags=${TAGS}" >> $GITHUB_OUTPUT
          echo "created=$(date -u +'%Y-%m-%dT%H:%M:%SZ')" >> $GITHUB_OUTPUT

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx
          
      - name: Build and cache image
        uses: docker/build-push-action@v3
        with:
          context: ./system/docker/client/
          file: ./system/docker/client/Dockerfile.${{ env.INPUT_UBUNTUVERSION }}
          push: false
          tags: ${{ steps.prep.outputs.tags }}
          labels: |
            org.opencontainers.image.source=${{ github.event.repository.html_url }}
            org.opencontainers.image.created=${{ steps.prep.outputs.created }}
            org.opencontainers.image.revision=${{ github.sha }}
          build-args: |
            CLIENT_SOVRIN_REPO_COMPONENT=${{ env.INPUT_CLIENTSOVRINREPOCOMPONENT}}
            LIBINDY_VERSION=${{ env.INPUT_LIBINDYVERSION}}
            DIND_CONTAINER_REGISTRY=ghcr.io/${{ env.GITHUB_REPOSITORY_NAME }}
            DIND_IMAGE_NAME=dind:${{ env.INPUT_UBUNTUVERSION }}
            LIBSOVTOKEN_INSTALL=${{ env.INPUT_LIBSOVTOKEN_INSTALL }}
            LIBSOVTOKEN_VERSION=${{ env.INPUT_LIBSOVTOKEN_VERSION }}
            LIBSOVTOKEN_REPO_COMPONENT=${{ env.INPUT_LIBSOVTOKEN_REPO_COMPONENT }}
          outputs: type=docker,dest=/tmp/client_image_${{ env.INPUT_UBUNTUVERSION }}.tar
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max

      - name: Upload client docker image artifacts
        uses: actions/upload-artifact@v2
        with:
          name: client_image
          path: /tmp/client_image_${{ env.INPUT_UBUNTUVERSION }}.tar
          retention-days: 1
      
      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache                     

  ### 1 step in workflow  per test
  ### The tests rely on docker in docker with the fixed network name and fixed IP addresses. 
  ### That's why the tests cannot be run in matrix mode because all tests would share the same host and same docker engine.
  tests:
    name: tests
    needs: [ workflow-setup, node-image, client-image]
    runs-on: ubuntu-latest
    env: 
      GITHUB_REPOSITORY_NAME: ${{ needs.workflow-setup.outputs.GITHUB_REPOSITORY_NAME }} 
    steps:
      - name: Git checkout hyperledger/indy-test-automation
        uses: actions/checkout@v3
        with:
          ref: ${{ env.TEST_AUTOMATION_BRANCH }}

      - name: Create docker network
        run: |
          docker network create --subnet="10.0.0.0/24" "indy-test-automation-network"

      - name: Download client artifact
        uses: actions/download-artifact@v3
        with:
          name: client_image
          path: /tmp

      - name: Download node artifact
        uses: actions/download-artifact@v3
        with:
          name: node_image
          path: /tmp

      - name: Load client and node image
        run: |
          docker load --input /tmp/client_image_${{ env.INPUT_UBUNTUVERSION }}.tar
          docker load --input /tmp/node_image_${{ env.INPUT_UBUNTUVERSION }}.tar

      - name: test
        id: test_consensus
        run: |
          cd ./system/docker
          sudo UBUNTU_VERSION="${{ env.INPUT_UBUNTUVERSION }}" IMAGE_REPOSITORY="ghcr.io/${{ env.GITHUB_REPOSITORY_NAME }}/" CLIENT_IMAGE="client:${{ env.INPUT_UBUNTUVERSION }}" NODE_IMAGE="node-${{ env.INPUT_UBUNTUVERSION }}" ./run.sh system/indy-node-tests/ "-l -v --junit-xml=test_consensus-report.xml --payments" indy-test-automation-network

      - name: Publish Test Report
        if: success() || failure()
        uses: scacap/action-surefire-report@v1.0.7
        continue-on-error: true
        with:
          check_name: test_consensus Test Report
          github_token: ${{ secrets.GITHUB_TOKEN }}
          report_paths: "*-report.xml"

      - name: Upload Detailed Test Failure Results
        # The test runner only emits the detailed test results if the tests fail.
        if: (steps.test_consensus.outcome == 'failure') && failure()
        uses: actions/upload-artifact@v2
        with:
          name: detailed-test-result-test_consensus
          path: test-result-indy-test-automation-test_consensus.txt
          retention-days: 5
